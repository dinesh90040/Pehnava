import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { motion } from "framer-motion";
import { Helmet } from "react-helmet";
import {
  ArrowLeft,
  CreditCard,
  Smartphone,
  QrCode,
  Truck,
  MapPin,
  Plus,
  Edit,
  Trash2,
  CheckCircle,
  Lock,
  Shield,
  Clock,
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { useToast } from "@/components/ui/use-toast";

const CheckoutPage = () => {
  const navigate = useNavigate();
  const { toast } = useToast();

  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState("");
  const [showAddressForm, setShowAddressForm] = useState(false);
  const [showQRCode, setShowQRCode] = useState(false);
  const [orderPlaced, setOrderPlaced] = useState(false);

  // Mock order data
  const [orderData, setOrderData] = useState({
    items: [
      {
        id: 1,
        name: "Royal Silk Saree",
        price: 25000,
        quantity: 1,
        imageUrl: "/images/Royal Silk Saree.png",
      },
      {
        id: 2,
        name: "Embroidered Sherwani",
        price: 30000,
        quantity: 1,
        imageUrl: "/images/Embroidered Sherwani.png",
      },
    ],
    subtotal: 55000,
    discount: 10000,
    shipping: 0,
    total: 45000,
  });

  // Mock addresses
  const [addresses, setAddresses] = useState([
    {
      id: 1,
      name: "John Doe",
      phone: "+91 98765 43210",
      address: "123, MG Road, Near City Mall",
      city: "Mumbai",
      state: "Maharashtra",
      pincode: "400001",
      isDefault: true,
    },
    {
      id: 2,
      name: "Jane Smith",
      phone: "+91 87654 32109",
      address: "456, Park Street, Apartment 5B",
      city: "Delhi",
      state: "Delhi",
      pincode: "110001",
      isDefault: false,
    },
  ]);

  const [selectedAddress, setSelectedAddress] = useState(1);
  const [newAddress, setNewAddress] = useState({
    name: "",
    phone: "",
    address: "",
    city: "",
    state: "",
    pincode: "",
  });

  const paymentMethods = [
    {
      id: "razorpay",
      name: "Credit/Debit Card",
      icon: <CreditCard className="h-6 w-6" />,
      description: "Visa, Mastercard, RuPay",
      available: true,
    },
    {
      id: "upi",
      name: "UPI Payment",
      icon: <Smartphone className="h-6 w-6" />,
      description: "Google Pay, PhonePe, Paytm, BHIM",
      available: true,
    },
    {
      id: "qr",
      name: "QR Code Payment",
      icon: <QrCode className="h-6 w-6" />,
      description: "Scan QR code to pay",
      available: true,
    },
    {
      id: "cod",
      name: "Cash on Delivery",
      icon: <Truck className="h-6 w-6" />,
      description: "Pay when your order arrives",
      available: true,
    },
  ];

  const addNewAddress = () => {
    if (
      !newAddress.name ||
      !newAddress.phone ||
      !newAddress.address ||
      !newAddress.city ||
      !newAddress.state ||
      !newAddress.pincode
    ) {
      toast({
        title: "Please fill all fields",
        description: "All address fields are required.",
        variant: "destructive",
      });
      return;
    }

    const address = {
      id: Date.now(),
      ...newAddress,
      isDefault: addresses.length === 0,
    };

    setAddresses((prev) => [...prev, address]);
    setSelectedAddress(address.id);
    setNewAddress({
      name: "",
      phone: "",
      address: "",
      city: "",
      state: "",
      pincode: "",
    });
    setShowAddressForm(false);

    toast({
      title: "Address Added",
      description: "New address has been added successfully.",
    });
  };

  const handlePayment = () => {
    if (!selectedPaymentMethod) {
      toast({
        title: "Select Payment Method",
        description: "Please choose a payment method to continue.",
        variant: "destructive",
      });
      return;
    }

    if (selectedPaymentMethod === "cod") {
      setOrderPlaced(true);
      toast({
        title: "Order Placed Successfully! ðŸŽ‰",
        description: "Your order will be delivered within 3-5 business days.",
      });
    } else if (selectedPaymentMethod === "qr") {
      setShowQRCode(true);
    } else {
      // Simulate payment processing
      toast({
        title: "Processing Payment...",
        description: "Please wait while we process your payment.",
      });

      setTimeout(() => {
        setOrderPlaced(true);
        toast({
          title: "Payment Successful! ðŸŽ‰",
          description: "Your order has been placed successfully.",
        });
      }, 2000);
    }
  };

  const generateQRCode = () => {
    // Use the actual QR code generated by Python script
    return "/qr_codes/pehenava_payment_qr.png";
  };

  if (orderPlaced) {
    return (
      <>
        <Helmet>
          <title>Order Confirmed | Pehenava</title>
          <meta
            name="description"
            content="Your order has been placed successfully"
          />
        </Helmet>

        <div className="pt-24 min-h-screen bg-gray-50">
          <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <div className="text-center">
              <motion.div
                initial={{ scale: 0 }}
                animate={{ scale: 1 }}
                transition={{ duration: 0.5 }}
                className="w-24 h-24 mx-auto mb-6 bg-green-100 rounded-full flex items-center justify-center"
              >
                <CheckCircle className="h-12 w-12 text-green-600" />
              </motion.div>

              <h1 className="text-3xl font-playfair font-bold text-gray-800 mb-4">
                Order Placed Successfully!
              </h1>

              <p className="text-lg text-gray-600 mb-8">
                Thank you for your purchase. Your order will be delivered within
                3-5 business days.
              </p>

              <div className="bg-white rounded-2xl p-8 shadow-sm mb-8">
                <h2 className="text-xl font-semibold text-gray-800 mb-4">
                  Order Summary
                </h2>
                <div className="space-y-2 text-left">
                  <div className="flex justify-between">
                    <span>Order ID:</span>
                    <span className="font-medium">
                      #PEH{Date.now().toString().slice(-6)}
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span>Total Amount:</span>
                    <span className="font-medium">
                      â‚¹{orderData.total.toLocaleString()}
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span>Payment Method:</span>
                    <span className="font-medium">
                      {
                        paymentMethods.find(
                          (p) => p.id === selectedPaymentMethod
                        )?.name
                      }
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span>Delivery Address:</span>
                    <span className="font-medium text-right max-w-xs">
                      {addresses.find((a) => a.id === selectedAddress)?.address}
                      ,{addresses.find((a) => a.id === selectedAddress)?.city}
                    </span>
                  </div>
                </div>
              </div>

              <div className="flex flex-col sm:flex-row gap-4 justify-center">
                <Button
                  onClick={() => navigate("/marketplace")}
                  variant="outline"
                  className="border-amber-600 text-amber-600 hover:bg-amber-50 px-8"
                >
                  Continue Shopping
                </Button>
                <Button
                  onClick={() => navigate("/")}
                  className="bg-gradient-to-r from-amber-600 to-rose-600 hover:from-amber-700 hover:to-rose-700 text-white px-8"
                >
                  Back to Home
                </Button>
              </div>
            </div>
          </div>
        </div>
      </>
    );
  }

  if (showQRCode) {
    return (
      <>
        <Helmet>
          <title>QR Code Payment | Pehenava</title>
          <meta name="description" content="Pay using QR code" />
        </Helmet>

        <div className="pt-24 min-h-screen bg-gray-50">
          <div className="max-w-2xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <div className="text-center">
              <button
                onClick={() => setShowQRCode(false)}
                className="flex items-center text-gray-600 hover:text-amber-600 transition-colors mb-8"
              >
                <ArrowLeft className="h-5 w-5 mr-2" />
                Back to Checkout
              </button>

              <h1 className="text-3xl font-playfair font-bold text-gray-800 mb-4">
                QR Code Payment
              </h1>

              <p className="text-lg text-gray-600 mb-8">
                Scan the QR code below with your UPI app to complete the payment
              </p>

              <div className="bg-white rounded-2xl p-8 shadow-sm mb-8">
                <div className="w-64 h-64 mx-auto mb-6 bg-gray-100 rounded-lg flex items-center justify-center">
                  <img
                    src={generateQRCode()}
                    alt="Payment QR Code"
                    className="w-full h-full object-contain"
                  />
                </div>

                <div className="space-y-4">
                  <div className="text-center">
                    <div className="text-2xl font-bold text-gray-800 mb-2">
                      â‚¹{orderData.total.toLocaleString()}
                    </div>
                    <p className="text-gray-600">Amount to be paid</p>
                  </div>

                  <div className="bg-amber-50 rounded-lg p-4">
                    <h3 className="font-semibold text-amber-800 mb-2">
                      Payment Instructions:
                    </h3>
                    <ol className="text-sm text-amber-700 space-y-1 text-left">
                      <li>
                        1. Open your UPI app (Google Pay, PhonePe, Paytm, etc.)
                      </li>
                      <li>2. Scan the QR code above</li>
                      <li>
                        3. Enter the amount: â‚¹{orderData.total.toLocaleString()}
                      </li>
                      <li>4. Complete the payment</li>
                    </ol>
                  </div>
                </div>
              </div>

              <div className="flex flex-col sm:flex-row gap-4 justify-center">
                <Button
                  onClick={() => setShowQRCode(false)}
                  variant="outline"
                  className="border-gray-300 text-gray-600 hover:bg-gray-50 px-8"
                >
                  Cancel Payment
                </Button>
                <Button
                  onClick={() => {
                    setShowQRCode(false);
                    setOrderPlaced(true);
                    toast({
                      title: "Payment Successful! ðŸŽ‰",
                      description: "Your order has been placed successfully.",
                    });
                  }}
                  className="bg-gradient-to-r from-amber-600 to-rose-600 hover:from-amber-700 hover:to-rose-700 text-white px-8"
                >
                  Payment Done
                </Button>
              </div>
            </div>
          </div>
        </div>
      </>
    );
  }

  return (
    <>
      <Helmet>
        <title>Checkout | Pehenava</title>
        <meta name="description" content="Complete your purchase at Pehenava" />
      </Helmet>

      <div className="pt-24 min-h-screen bg-gray-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          {/* Header */}
          <div className="flex items-center mb-8">
            <button
              onClick={() => navigate("/cart")}
              className="flex items-center text-gray-600 hover:text-amber-600 transition-colors mr-4"
            >
              <ArrowLeft className="h-5 w-5 mr-2" />
              Back to Cart
            </button>
            <h1 className="text-3xl font-playfair font-bold text-gray-800">
              Checkout
            </h1>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            {/* Checkout Form */}
            <div className="lg:col-span-2 space-y-8">
              {/* Delivery Address */}
              <div className="bg-white rounded-2xl p-6 shadow-sm">
                <div className="flex items-center justify-between mb-6">
                  <h2 className="text-xl font-semibold text-gray-800 flex items-center">
                    <MapPin className="h-5 w-5 mr-2 text-amber-600" />
                    Delivery Address
                  </h2>
                  <Button
                    onClick={() => setShowAddressForm(!showAddressForm)}
                    variant="outline"
                    size="sm"
                    className="border-amber-600 text-amber-600 hover:bg-amber-50"
                  >
                    <Plus className="h-4 w-4 mr-2" />
                    Add New
                  </Button>
                </div>

                {/* Address List */}
                <div className="space-y-4 mb-6">
                  {addresses.map((address) => (
                    <div
                      key={address.id}
                      className={`border-2 rounded-lg p-4 cursor-pointer transition-colors ${
                        selectedAddress === address.id
                          ? "border-amber-600 bg-amber-50"
                          : "border-gray-200 hover:border-gray-300"
                      }`}
                      onClick={() => setSelectedAddress(address.id)}
                    >
                      <div className="flex items-start justify-between">
                        <div className="flex-1">
                          <div className="flex items-center mb-2">
                            <span className="font-semibold text-gray-800">
                              {address.name}
                            </span>
                            {address.isDefault && (
                              <span className="ml-2 bg-amber-100 text-amber-600 px-2 py-1 rounded text-xs font-medium">
                                Default
                              </span>
                            )}
                          </div>
                          <p className="text-gray-600 mb-1">
                            {address.address}
                          </p>
                          <p className="text-gray-600 mb-1">
                            {address.city}, {address.state} - {address.pincode}
                          </p>
                          <p className="text-gray-600">{address.phone}</p>
                        </div>
                        <div className="flex items-center space-x-2">
                          <button className="p-1 text-gray-400 hover:text-gray-600">
                            <Edit className="h-4 w-4" />
                          </button>
                          <button className="p-1 text-gray-400 hover:text-red-600">
                            <Trash2 className="h-4 w-4" />
                          </button>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>

                {/* Add New Address Form */}
                {showAddressForm && (
                  <motion.div
                    initial={{ opacity: 0, height: 0 }}
                    animate={{ opacity: 1, height: "auto" }}
                    exit={{ opacity: 0, height: 0 }}
                    className="border-t pt-6"
                  >
                    <h3 className="text-lg font-semibold text-gray-800 mb-4">
                      Add New Address
                    </h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <input
                        type="text"
                        placeholder="Full Name"
                        value={newAddress.name}
                        onChange={(e) =>
                          setNewAddress({ ...newAddress, name: e.target.value })
                        }
                        className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-amber-500 focus:border-transparent"
                      />
                      <input
                        type="tel"
                        placeholder="Phone Number"
                        value={newAddress.phone}
                        onChange={(e) =>
                          setNewAddress({
                            ...newAddress,
                            phone: e.target.value,
                          })
                        }
                        className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-amber-500 focus:border-transparent"
                      />
                      <input
                        type="text"
                        placeholder="Address"
                        value={newAddress.address}
                        onChange={(e) =>
                          setNewAddress({
                            ...newAddress,
                            address: e.target.value,
                          })
                        }
                        className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-amber-500 focus:border-transparent md:col-span-2"
                      />
                      <input
                        type="text"
                        placeholder="City"
                        value={newAddress.city}
                        onChange={(e) =>
                          setNewAddress({ ...newAddress, city: e.target.value })
                        }
                        className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-amber-500 focus:border-transparent"
                      />
                      <input
                        type="text"
                        placeholder="State"
                        value={newAddress.state}
                        onChange={(e) =>
                          setNewAddress({
                            ...newAddress,
                            state: e.target.value,
                          })
                        }
                        className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-amber-500 focus:border-transparent"
                      />
                      <input
                        type="text"
                        placeholder="Pincode"
                        value={newAddress.pincode}
                        onChange={(e) =>
                          setNewAddress({
                            ...newAddress,
                            pincode: e.target.value,
                          })
                        }
                        className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-amber-500 focus:border-transparent"
                      />
                    </div>
                    <div className="flex justify-end space-x-3 mt-4">
                      <Button
                        onClick={() => setShowAddressForm(false)}
                        variant="outline"
                        className="border-gray-300 text-gray-600 hover:bg-gray-50"
                      >
                        Cancel
                      </Button>
                      <Button
                        onClick={addNewAddress}
                        className="bg-gradient-to-r from-amber-600 to-rose-600 hover:from-amber-700 hover:to-rose-700 text-white"
                      >
                        Add Address
                      </Button>
                    </div>
                  </motion.div>
                )}
              </div>

              {/* Payment Methods */}
              <div className="bg-white rounded-2xl p-6 shadow-sm">
                <h2 className="text-xl font-semibold text-gray-800 mb-6">
                  Payment Method
                </h2>

                <div className="space-y-4">
                  {paymentMethods.map((method) => (
                    <div
                      key={method.id}
                      className={`border-2 rounded-lg p-4 cursor-pointer transition-colors ${
                        selectedPaymentMethod === method.id
                          ? "border-amber-600 bg-amber-50"
                          : "border-gray-200 hover:border-gray-300"
                      } ${
                        !method.available ? "opacity-50 cursor-not-allowed" : ""
                      }`}
                      onClick={() =>
                        method.available && setSelectedPaymentMethod(method.id)
                      }
                    >
                      <div className="flex items-center">
                        <div className="flex-shrink-0 mr-4">{method.icon}</div>
                        <div className="flex-1">
                          <h3 className="font-semibold text-gray-800">
                            {method.name}
                          </h3>
                          <p className="text-sm text-gray-600">
                            {method.description}
                          </p>
                        </div>
                        <div className="flex-shrink-0">
                          <div
                            className={`w-4 h-4 rounded-full border-2 ${
                              selectedPaymentMethod === method.id
                                ? "border-amber-600 bg-amber-600"
                                : "border-gray-300"
                            }`}
                          >
                            {selectedPaymentMethod === method.id && (
                              <div className="w-full h-full rounded-full bg-white scale-50"></div>
                            )}
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>

                {/* Security Badges */}
                <div className="mt-6 pt-6 border-t">
                  <div className="flex items-center justify-center space-x-6 text-sm text-gray-600">
                    <div className="flex items-center">
                      <Lock className="h-4 w-4 mr-1 text-green-600" />
                      <span>SSL Secured</span>
                    </div>
                    <div className="flex items-center">
                      <Shield className="h-4 w-4 mr-1 text-blue-600" />
                      <span>PCI Compliant</span>
                    </div>
                    <div className="flex items-center">
                      <Clock className="h-4 w-4 mr-1 text-purple-600" />
                      <span>Instant Processing</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Order Summary */}
            <div className="lg:col-span-1">
              <div className="bg-white rounded-2xl p-6 shadow-sm sticky top-24">
                <h2 className="text-xl font-semibold text-gray-800 mb-6">
                  Order Summary
                </h2>

                {/* Order Items */}
                <div className="space-y-4 mb-6">
                  {orderData.items.map((item) => (
                    <div key={item.id} className="flex items-center space-x-3">
                      <div className="w-12 h-12 bg-gray-100 rounded-lg overflow-hidden flex-shrink-0">
                        <img
                          src={item.imageUrl}
                          alt={item.name}
                          className="w-full h-full object-cover"
                        />
                      </div>
                      <div className="flex-1 min-w-0">
                        <h4 className="text-sm font-medium text-gray-800 truncate">
                          {item.name}
                        </h4>
                        <p className="text-xs text-gray-600">
                          Qty: {item.quantity}
                        </p>
                      </div>
                      <div className="text-sm font-medium text-gray-800">
                        â‚¹{(item.price * item.quantity).toLocaleString()}
                      </div>
                    </div>
                  ))}
                </div>

                {/* Price Breakdown */}
                <div className="space-y-3 mb-6">
                  <div className="flex justify-between text-gray-600">
                    <span>Subtotal</span>
                    <span>â‚¹{orderData.subtotal.toLocaleString()}</span>
                  </div>

                  <div className="flex justify-between text-green-600">
                    <span>Discount</span>
                    <span>-â‚¹{orderData.discount.toLocaleString()}</span>
                  </div>

                  <div className="flex justify-between text-gray-600">
                    <span>Shipping</span>
                    <span>
                      {orderData.shipping === 0 ? (
                        <span className="text-green-600">FREE</span>
                      ) : (
                        `â‚¹${orderData.shipping}`
                      )}
                    </span>
                  </div>

                  <div className="border-t pt-3">
                    <div className="flex justify-between text-lg font-bold text-gray-800">
                      <span>Total</span>
                      <span>â‚¹{orderData.total.toLocaleString()}</span>
                    </div>
                  </div>
                </div>

                <Button
                  onClick={handlePayment}
                  className="w-full bg-gradient-to-r from-amber-600 to-rose-600 hover:from-amber-700 hover:to-rose-700 text-white py-3 text-lg"
                >
                  {selectedPaymentMethod === "cod" ? "Place Order" : "Pay Now"}
                </Button>

                <p className="text-xs text-gray-500 text-center mt-4">
                  By placing this order, you agree to our Terms of Service and
                  Privacy Policy.
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default CheckoutPage;
